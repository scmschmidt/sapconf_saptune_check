#!/bin/bash
# ------------------------------------------------------------------------------
# Copyright (c) 2019 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of version 3 of the GNU General Public License as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, contact SUSE Linux GmbH.
#
# ------------------------------------------------------------------------------
# Author: SÃ¶ren Schmidt <soeren.schmidt@suse.com>
#
# This tool checks if sapconf or saptune is set up correctly. 
# It will not dig deeper to check if the tuning itself is working.
#
# exit codes:       0   All checks ok. Sapconf/saptune have been set up correctly.
#                   1   Some warnings occured. Sapconf/saptune should work, but better check manually.
#                   2   Some errors occured. Sapconf/saptune will not work.
#                   3   Wrong parameters given to the tool on commandline.
#
# Changelog:
#
# 24.06.2019  v0.1      First release.
# 24.06.2019  v0.1.1    Small bug fixed / Some messages rephrased
# 25.06.2019  v0.1.2    Disclaimer added
# 22.11.2019  v0.1.3    Bug fix: Now handles missing rpm packages
# 02.07.2020  v1.0.0    Rework to fix some bugs regarding missing packages and 
#                       support for tuned-less sapconf
# 03.07.2020  v1.1.0    Searches for obsolete leftovers from updates and 
#                       warns if deprecated profiles, SAP Notes or Solutions are used
# 03.07.2020  v1.1.1    Bug fix: We terminate with an error if saptune v1 is discovered and if saptune v3 detected

version="1.1.1"

# We use these global arrays through out the program:
#
# package_version     -  contains package version (string)
# unit_state_active   -  contains systemd unit state (systemctl is-active) 
# unit_state_enabled  -  contains systemd unit state (systemctl is-enabled) 
# tool_profile        -  contains actual profile (string) for each tool
declare -A package_version unit_state_active unit_state_enabled tool_profile


function header() { 
    local len=${#1}
    echo -e "\n${1}"
    printf '=%.s' $(eval "echo {1.."$((${len}))"}")
    echo
}

function print_ok() {
    local text="  ${@}"
    echo -e "[ OK ]${text}"
}

function print_fail() {
    local text="  ${@}"
    echo -e "[FAIL]${text}"
}

function print_warn() {
    local text="  ${@}"
    echo -e "[WARN]${text}"
}

function print_note() {
    local text="  ${@}"
    echo -e "[NOTE]${text}"
}

function get_package_versions() {
    # Params:   PACKAGE...
    # Output:   -
    # Exitcode: -
    #
    # Determines package version as string for each PACKAGE.
    # Not installed packages will have an empty string as version.
    #
    # The function updates the associative array "package_version".
    #
    # Requires:-

    local package version
    for package in "${@}" ; do
        if version=$(rpm -q --qf '%{version}' "${package}" 2>&1) ; then
            package_version["${package}"]=${version}
        else
            package_version["${package}"]=''
        fi
    done
}

function get_unit_states() {
    # Params:   UNIT...
    # Output:   -
    # Exitcode: -
    #
    # Determines the state (is-active/is-enabled) for each UNIT.
    # A missing state is reported as "missing".
    #
    # The function updates the associative arrays "unit_state_active" and "unit_state_enabled".
    #
    # Requires: -

    local unit state_active state_enabled
    for unit in "${@}" ; do
        state_active=$(systemctl is-active "${unit}" 2> /dev/null)
        state_enabled=$(systemctl is-enabled "${unit}" 2> /dev/null)
        unit_state_active["${unit}"]=${state_active:-missing}
        unit_state_enabled["${unit}"]=${state_enabled:-missing}
    done
}

function get_tool_profiles() {
    # Params:   -
    # Output:   -
    # Exitcode: -
    #
    # Determines the current profile of tuned, sapconf and saptune (profile==Notes/Solution). 
    # A missing profile (file) is reported as "missing".
    #
    # The function updates the associative array "tool_profile".
    #
    # Requires: -

    local active_profile TUNE_FOR_NOTES TUNE_FOR_SOLUTIONS
    active_profile=''
    [ -e /etc/tuned/active_profile ] && active_profile=$(< /etc/tuned/active_profile)
    tool_profile['tuned']="${active_profile:-missing}"

    active_profile=''
    if [ -e /var/lib/sapconf/act_profile ] ; then 
        active_profile=$(< /var/lib/sapconf/act_profile)
    else
        active_profile='no file'
    fi
    tool_profile['sapconf']="${active_profile:-missing}"
      

    if [ -e /etc/sysconfig/saptune ] ; then
        eval $(grep ^TUNE_FOR_NOTES= /etc/sysconfig/saptune)
        eval $(grep ^TUNE_FOR_SOLUTIONS= /etc/sysconfig/saptune)
        if [ -z "${TUNE_FOR_NOTES}" -a -z "${TUNE_FOR_SOLUTIONS}" ] ; then
            tool_profile['saptune']='missing'    
        else
            tool_profile['saptune']="solutions: ${TUNE_FOR_SOLUTIONS:=-} notes: ${TUNE_FOR_NOTES:=-}"
        fi
    else
        tool_profile['saptune']='missing'    
    fi
}

function configured_saptune_version() {
    # Params:   -
    # Output:   -
    # Exitcode: -
    #
    # Checks the configured saptune version. 
    # A missing saptune is reported as "missing".
    #
    # The function updates the variable "configured_saptune_version".
    #
    # Requires: -

    local SAPTUNE_VERSION
    [ -e /etc/sysconfig/saptune ] && eval $(grep ^SAPTUNE_VERSION= /etc/sysconfig/saptune)
    configured_saptune_version="${SAPTUNE_VERSION:-missing}"
}

function collect_data() {
    # Params:   -
    # Output:   -
    # Exitcode: -
    #
    # Calls various functions to collect data.
    #
    # Requires: get_package_versions()
    #           get_unit_states()
    #           get_tool_profiles()
    #           configured_saptune_version()

    # Collect data about some packages.
    get_package_versions sapconf saptune tuned

    # Collect data about some systemd services.
    get_unit_states sapconf.service tuned.service #saptune.service

    # Collect the profiles of various tools.
    get_tool_profiles

    # Get configured saptune version.
    configured_saptune_version
}

function compile_filelists() {
    # Params:   VERSIONTAG
    # Output:   warnings and fails with print_warn() and print_fail()
    # Exitcode: -
    #
    # Checks the existence of mandatory and invalid files for sapconf and saptune 
    # (depending on SLES release and VERSIONTAG) and prints warnings or fails.
    #
    # The following strings for VERSIONTAG are allowed: "sapconf-4_reworked", "sapconf-5", 
    # "saptune-2" and "saptune-3"
    #
    # Also for all mandatory and invalid files, we search for RPM leftovers (.rpmnew/.rpmsave). 
    #
    # IMPORTANT:
    #   When adding new files every file must be listed in either of the arrays mandatory_files", 
    #   "optional_files" or "ivalid_files" but in *each* SLES release and tag section!
    #   The array optional_files is not used at the moment and might be removed in the future.
    #
    # The function updates the variables "warnings" and "fails" used in check_sapconf() and saptune_check(). 
    #
    # Requires: print_warn() and print_fail()

    local VERSION_ID tag="${1}" mandatory_files optional_files invalid_files rpm_leftovers
    declare -a mandatory_files optional_files invalid_files rpm_leftovers

    eval $(grep ^VERSION_ID= /etc/os-release)
    case ${VERSION_ID} in 
        12*)
            case ${tag} in 
                sapconf-4_reworked)
                    mandatory_files=( '/etc/sysconfig/sapconf' '/etc/sysconfig/sapnote-1680803')
                    optional_files=( '/etc/tuned/sap-netweaver' '/etc/tuned/sap-hana' '/etc/tuned/sap-ase' '/etc/tuned/sap-bobj' )
                    invalid_files=( '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-bobj' '/etc/tuned/sapconf' )
                    ;;
                sapconf-5)
                    mandatory_files=( '/etc/sysconfig/sapconf' '/etc/sysconfig/sapnote-1680803' '/etc/sysconfig/sapnote-bobj')
                    optional_files=( '/etc/tuned/sapconf' )
                    invalid_files=( '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-1557506' '/etc/tuned/sap-netweaver' '/etc/tuned/sap-hana' '/etc/tuned/sap-ase' '/etc/tuned/sap-bobj')
                    ;;
                saptune-2)
                    mandatory_files=( '/etc/sysconfig/saptune' )
                    optional_files=( '' )
                    invalid_files=( '/etc/saptune/extra/SAP_ASE-SAP_Adaptive_Server_Enterprise.conf' '/etc/saptune/extra/SAP_BOBJ-SAP_Business_OBJects.conf' '/etc/sysconfig/saptune-note-1275776' '/etc/sysconfig/saptune-note-1557506' '/etc/sysconfig/saptune-note-SUSE-GUIDE-01' '/etc/sysconfig/saptune-note-SUSE-GUIDE-02' )
                    ;;
                saptune-3)
                    mandatory_files=( '/etc/sysconfig/saptune' )
                    optional_files=( '' )
                    invalid_files=( '/etc/saptune/extra/SAP_ASE-SAP_Adaptive_Server_Enterprise.conf' '/etc/saptune/extra/SAP_BOBJ-SAP_Business_OBJects.conf' '/etc/sysconfig/saptune-note-1275776' '/etc/sysconfig/saptune-note-1557506' '/etc/sysconfig/saptune-note-SUSE-GUIDE-01' '/etc/sysconfig/saptune-note-SUSE-GUIDE-02' )
                    ;;
            esac
            ;;
        15*)
            case ${tag} in 
                sapconf-4_reworked)
                    mandatory_files=( '/etc/sysconfig/sapconf' )
                    optional_files=( '/etc/tuned/sapconf' )
                    invalid_files=( '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-1680803' '/etc/sysconfig/sapnote-bobj' '/etc/tuned/sap-netweaver' '/etc/tuned/sap-hana' '/etc/tuned/sap-ase' '/etc/tuned/sap-bobj' )
                    ;;
                sapconf-5)
                    mandatory_files=( '/etc/sysconfig/sapconf' )
                    optional_files=( '' )
                    invalid_files=( '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-1557506' '/etc/sysconfig/sapnote-1680803' '/etc/sysconfig/sapnote-bobj' '/etc/tuned/sap-netweaver' '/etc/tuned/sap-hana' '/etc/tuned/sap-ase' '/etc/tuned/sap-bobj' '/etc/tuned/sapconf')
                    ;;
                saptune-2)
                    mandatory_files=( '/etc/sysconfig/saptune' )
                    optional_files=( '' )
                    invalid_files=( '/etc/saptune/extra/SAP_ASE-SAP_Adaptive_Server_Enterprise.conf' '/etc/saptune/extra/SAP_BOBJ-SAP_Business_OBJects.conf' '/etc/sysconfig/saptune-note-1275776' '/etc/sysconfig/saptune-note-1557506' '/etc/sysconfig/saptune-note-SUSE-GUIDE-01' '/etc/sysconfig/saptune-note-SUSE-GUIDE-02' )
                    ;;
                saptune-3)
                    mandatory_files=( '/etc/sysconfig/saptune' )
                    optional_files=( '' )
                    invalid_files=( '/etc/saptune/extra/SAP_ASE-SAP_Adaptive_Server_Enterprise.conf' '/etc/saptune/extra/SAP_BOBJ-SAP_Business_OBJects.conf' '/etc/sysconfig/saptune-note-1275776' '/etc/sysconfig/saptune-note-1557506' '/etc/sysconfig/saptune-note-SUSE-GUIDE-01' '/etc/sysconfig/saptune-note-SUSE-GUIDE-02' )
                    ;;
            esac
            ;;
    esac

    # Special test for update helper /etc/tuned/saptune/tuned.conf (saptune v2 migration).
    case ${tag} in 
        saptune-2)
            if [ -e "/etc/tuned/saptune/tuned.conf" ] ; then
                if $(grep -q '#stv1tov2#' "/etc/tuned/saptune/tuned.conf") ; then
                    print_warn "/etc/tuned/saptune/tuned.conf contains upgrade helper flag '#stv1tov2#'!\t-> Please read man page saptune-migrate(7)!"
                    ((warnings++))
                fi
            fi
            ;;
    esac

    # Now check the existence of mandatory and invalid files and print warnings and fails.    
    for ((i=0;i<${#mandatory_files[@]};i++)) ; do
        if [ ! -e "${mandatory_files[i]}" ] ; then 
            print_fail "${mandatory_files[i]} is missing, but a mandatory file.\t --> Check your installation!"
            ((fails++))
        fi
        rpm_leftovers+=("${mandatory_files[i]}.rpmsave" "${mandatory_files[i]}.rpmnew" )
    done 
    for ((i=0;i<${#invalid_files[@]};i++)) ; do
        if [ -e "${invalid_files[i]}" ] ; then 
            print_warn "${invalid_files[i]} is not used by this version. Maybe a leftover from an update?\t --> Check the content and remove it."
            ((warnings++))
        fi
        rpm_leftovers+=("${invalid_files[i]}.rpmsave" "${invalid_files[i]}.rpmnew" )
    done 
    
    # Print a warning if we have found RPM leftovers!
    for ((i=0;i<${#rpm_leftovers[@]};i++)) ; do
        if [ -e "${rpm_leftovers[i]}" ] ; then 
            print_warn "${rpm_leftovers[i]} found. This is a leftover from a package update!\t --> Check the content and remove it."
            ((warnings++))
        fi
    done 
}

function overview() {
    # We just list the system configuration without any 
    # analysis if is correct for sapconf or saptune.
    
    # Print overview of packages.
    header "Package overview"
    for package in "${!package_version[@]}" ;do
        version=${package_version["${package}"]}
        if [ -n "${version}" ] ; then
            print_note "${package} has version ${version}"
        else
            print_note "${package} is not installed"
        fi
    done

    # Print overview of systemd units.
    header "Systemd unit overview"
    for unit in "${!unit_state_active[@]}" ;do
        print_note "${unit} is ${unit_state_active["${unit}"]}"
        print_note "${unit} is ${unit_state_enabled["${unit}"]}"
    done

    # Print overview of profiles.
    header "Profile overview"
    print_note "tuned profile is ${tool_profile['tuned']}"
    [ "${package_version['sapconf']:0:1}" = '5' ] && print_note "sapconf profile is ${tool_profile['sapconf']}"
    print_note "saptune configuration is ${tool_profile['saptune']}"
    print_note "saptune is configured for version: ${configured_saptune_version}"

}

function check_sapconf() {
    # Checks if sapconf is installed correctly.

    local fails=0 warnings=0 tuned_used version_tag

    # We can stop, if sapconf is not installed.
    if [ -z "${package_version['sapconf']}" ] ; then
        echo "sapconf is not installed" 
        return 2    
    fi

    # Depending on the sapconf version we have to do different things. 
    #   <  4.1.12 are not reworked ones --> we terminate
    #   >= 4.1.12 & < 5 are reworked ones with tuned --> we check  
    #   >= 5        are reworked ones, but tuned-less --> we check
    case "${package_version['sapconf']}" in
        [0123].*|4.0.*) 
            print_fail "sapconf version ${version} is not a reworked one!\t--> Please update."
            return 2        
            ;;
        4.1.*)
            if [ "${package_version['sapconf']##*.}" -lt 12 ] ; then
                print_fail "sapconf version ${package_version['sapconf']} is not a reworked one!\t--> Please update."
                return 2        
            fi
            tuned_used='yes'
            version_tag='sapconf-4_reworked'
            ;;
        4.[2-9].*)
            tuned_used='yes'
            version_tag='sapconf-4_reworked'
            ;;
        5.*)  
            tuned_used='no'
            version_tag='sapconf-5'
            ;;
        *)  
            print_fail "sapconf version ${package_version['sapconf']} is unknown to this script! Exiting."
            return 2 
            ;;
    esac

    # Doing tests depending if we have a tuned-based sapconf or not.
    case "${tuned_used}" in
        yes)    
            header "Checking sapconf (tuned-based)"
            print_ok "sapconf package has version ${package_version['sapconf']}" 

            # Checking for the tuned package.
            case "${package_version['tuned']}" in 
                '')
                    print_fail "tuned package is missing\t\t--> Install the package with 'zypper install tuned'."
                    ((fails++))
                    ;;
                *)
                    print_ok "tuned package has version ${package_version['tuned']}"

                    # Checking status of tuned.service.
                    case "${unit_state_active['tuned.service']}" in
                        active)
                            print_ok "tuned.service is active"
                            ;;
                        *)
                            # Only if sapconf.service is active, we have a problem.
                            case "${unit_state_active['sapconf.service']}" in 
                                active)
                                    print_fail "tuned.service is ${unit_state_active['tuned.service']}\t\t--> The sapconf.service is active and should have started tuned.service. Try a 'systemctl restart sapconf.service'."
                                    ((fails++))
                                    ;;
                                *)
                                    print_warn "tuned.service is ${unit_state_active['tuned.service']}\t\t--> After a 'systemctl start sapconf.service' tuned.service should be active as well."
                                    ((warnings++))
                                    ;;
                            esac
                            ;;
                    esac
                    case "${unit_state_enabled['tuned.service']}" in
                        enabled)
                            print_warn "tuned.service is enabled\t\t--> The sapconf.service will take care of tuned. Better disable it by running 'systemctl disable tuned.service'."
                            ((warnings++))
                            ;;
                        *)
                            print_ok "tuned.service is ${unit_state_enabled['tuned.service']}"
                            ;;
                    esac
                    ;;
            esac

            # Checking status of sapconf.service.
            case "${unit_state_active['sapconf.service']}" in 
                active)
                    print_ok "sapconf.service is active"

                    # Checking the tuned profile.
                    case "${tool_profile['tuned']}" in
                        sapconf|sap-netweaver|sap-hana)
                            print_ok "sapconf tuned profile '${tool_profile['tuned']}' is set"
                            ;;
                        sap-bobj|sap-ase)
                            print_warn "sapconf tuned profile '${tool_profile['tuned']}' is valid but deprecated"
                            ((warnings++))
                            ;; 
                        *)
                            print_fail "No sapconf tuned profile: ${tool_profile['tuned']} \t--> Please choose a sapconf profile by running 'tuned-adm profile <your choosen profile>'"
                            ((fails++))
                            ;;
                    esac
                    ;;
                *)  
                    print_fail "sapconf.service is ${unit_state_active['sapconf.service']}\t\t--> Run 'systemctl start sapconf.service' to activate the tuning now."
                    ((fails++))
                    ;;
            esac
            case "${unit_state_enabled['sapconf.service']}" in 
                enabled)
                    print_ok "sapconf.service is enabled"
                    ;;
                *)
                    print_fail "sapconf.service is ${unit_state_enabled['sapconf.service']}\t\t--> Run 'systemctl enable sapconf.service' to activate sapconf at boot."
                    ((fails++))
                    ;;
            esac

            # Check config files and rpm leftovers.
            compile_filelists ${version_tag}       
            ;;    
        no) 
            header "Checking sapconf (tuned-less)"
            print_ok "sapconf package has version ${package_version['sapconf']}"

            # Checking status of sapconf.service.
            case "${unit_state_active['sapconf.service']}" in 
                active)
                    print_ok "sapconf.service is active"

                    # Checking the sapconf profile.
                    case "${tool_profile['sapconf']}" in
                        "no file")
                            ;;
                        sapconf-netweaver|sapconf-hana|sapconf-bobj|sapconf-ase)
                            print_ok "sapconf profile '${tool_profile['sapconf']#sapconf-}' is set"
                            ;; 
                        missing)
                            print_fail "No sapconf profile is set!\t\t--> Please set a sapconf profile by running 'sapconf stop && sapconf <your choosen profile>'"
                            ((fails++))
                            ;;
                        *)
                            print_fail "No sapconf profile: ${tool_profile['sapconf']}\t--> Please set a sapconf profile by running 'sapconf stop && sapconf <your choosen profile>'"
                            ((fails++))
                            ;;
                    esac
                    ;;
                *)  
                    print_fail "sapconf.service is ${unit_state_active['sapconf.service']}\t\t--> Run 'systemctl start sapconf.service' to activate the tuning now."
                    ((fails++))
                    ;;
            esac
            case "${unit_state_enabled['sapconf.service']}" in 
                enabled)
                    print_ok "sapconf.service is enabled"
                    ;;
                *)
                    print_fail "sapconf.service is ${unit_state_enabled['sapconf.service']}\t\t--> Run 'systemctl enable sapconf.service' to activate sapconf at boot."
                    ((fails++))
                    ;;
            esac

            # Checking status of tuned.service.
            if [ -n "${package_version['tuned']}" ] ; then 
                case "${unit_state_active['tuned.service']}" in
                    inactive)
                        print_ok "tuned.service is inactive"
                        ;;
                    *)
                        # Only if sapconf.service is active, we have a problem.
                        case "${unit_state_active['sapconf.service']}" in 
                            active)
                                print_warn "tuned.service is ${unit_state_active['tuned.service']}\t\t\t--> sapconf does not rely on tuned anymore. Run 'systemctl stop tuned.service'"
                                ((warnings++))
                                print_note "tuned profile is: '${tool_profile['tuned']}'"
                                ;;
                        esac
                        ;;
                esac
                case "${unit_state_enabled['tuned.service']}" in
                    enabled)
                        print_warn "tuned.service is enabled\t\t--> sapconf does not rely on tuned anymore. Disable it by running 'systemctl disable tuned.service'."
                        ((warnings++))
                        ;;
                    *)
                        print_ok "tuned.service is ${unit_state_enabled['tuned.service']}"
                        ;;
                esac
            fi
            
            # Check config files and rpm leftovers.
            compile_filelists ${version_tag}
            ;;    
        *)  
            echo "Error in version evaluation. Report a bug!"
            return 2 
            ;;
    esac

    # Summary.
    echo
    [ ${warnings} -gt 0 ] && echo "${warnings} warning(s) have been found."
    [ ${fails} -gt 0 ] && echo "${fails} error(s) have been found."
    if [ ${fails} -gt 0 ] ; then
        echo "Sapconf will not work properly!"
        return 1
    else 
        if [ ${warnings} -gt 0 ] ; then
            echo "Sapconf should work properly, but better investigate!"
        else
            echo "Sapconf is set up correctly."
        fi
    fi
    return 0   
}

function check_saptune() {
    # Checks if saptune is installed correctly.

    local fails=0 warnings=0 tuned_used version_tag SAPTUNE_VERSION TUNE_FOR_SOLUTIONS TUNE_FOR_NOTES

    # We can stop, if saptune is not installed.
    if [ -z "${package_version['saptune']}" ] ; then
        echo "saptune is not installed" 
        return 2    
    fi

    case "${package_version['saptune']}" in
        1.*)
            print_fail "saptune version ${version} is not a reworked one!\t--> Please update."
            return 2
            ;;
        2.*)
            tuned_used='yes'
            version_tag='saptune-2'
            ;;
        3.*)
            tuned_used='no'
            version_tag='saptune-3'
            ;;
        *)  
            print_fail "saptune version ${package_version['saptune']} is unknown to this script! Exiting."
            return 2 
            ;;
    esac

    # Doing tests depending if we have a tuned-based saptune or not.
    case "${tuned_used}" in
        yes)    
            header "Checking saptune (tuned-based)"

            # Version 1 should not be used anymore and version >= 2 should not run in compatibility mode.
            case "${package_version['saptune']}" in
                1.*)
                    print_warn "saptune package version ${package_version['saptune']}\t\t--> Version 1 is obsolete. Please update saptune."
                    ((warnings++))
                    ;; 
                *)  
                    print_ok "saptune package has version ${package_version['saptune']}" 
                    case "${configured_saptune_version}" in
                        1)
                            print_warn "saptune is running in compat version 1\t--> Please read man page 'saptune-migrate' to migrate to version 2." 
                            ((warnings++)) 
                            ;;    
                    esac
                    ;;
            esac

            # The sapconf.service may not be active or enabled.
            if [ -n "${package_version['sapconf']}" ]  ; then
                case "${unit_state_active['sapconf.service']}" in 
                    active)
                        print_fail "sapconf.service is active\t\t--> Run 'systemctl stop sapconf.service' to stop the tuning now."
                        ((fails++))
                        ;;
                    *)
                        print_ok "sapconf.service is inactive"
                        ;;
                esac
                case "${unit_state_enabled['sapconf.service']}" in 
                    disabled)
                        print_ok "sapconf.service is disbled"
                        ;;
                    *)
                        print_fail "sapconf.service is enabled\t\t--> Run 'systemctl disable sapconf.service' to deactivate sapconf at boot."
                        ((fails++))
                        ;;
                esac
            fi

            # We need tuned for saptune.
            case "${package_version['tuned']}" in 
                '')
                    print_fail "tuned package is missing\t\t--> Install the package with 'zypper install tuned'."
                    ((fails++))
                    ;;
                *)
                    print_ok "tuned package has version ${package_version['tuned']}"

                    case "${unit_state_active['tuned.service']}" in   
                        active)
                            print_ok "tuned.service is active"

                            # Checking the tuned profile.
                            case "${tool_profile['tuned']}" in
                                saptune)
                                    print_ok "saptune tuned profile is set"
                                    ;;
                                *)
                                    print_fail "'${tool_profile['tuned']}' is no saptune tuned profile\t--> Run 'saptune daemon start' to set the profile."
                                    ((fails++))
                                    ;;
                            esac
                            ;;
                        *)    
                            print_fail "tuned.service is inactive\t\t--> Run 'saptune daemon start' to start the tuning now."
                            ((fails++))
                            ;;
                    esac
                    case "${unit_state_enabled['tuned.service']}" in
                        enabled)
                            print_ok "tuned.service is enabled"
                            ;;
                        *)
                            print_fail "tuned.service is disabled\t\t--> Run 'saptune daemon start' to enable tuned at boot."
                            ((fails++))
                            ;;
                    esac
                    ;;
            esac

            # Check solutions/notes of saptune
            case "${tool_profile['saptune']}" in 
                missing)
                    print_fail "No solutions or notes applied\t\t--> Run 'saptune solution|note apply <id>' to configure saptune."
                    ((fails++))
                    ;;
                *MAXDB*)
                    print_warn "saptune is configured with an obsolete solution: ${tool_profile['saptune']}"
                    ((warnings++))
                    ;;    
                *)
                    print_ok "saptune is configured: ${tool_profile['saptune']}"
                    ;;
            esac

            # Check config files and rpm leftovers.
            compile_filelists ${version_tag}
            ;;
        no) 
            header "Checking saptune (tuned-less)"
            print_ok "saptune package has version ${package_version['saptune']}"
            print_note "Tests for this version haven't implemented yet!"
            return 3
            ;;
        *)  
            echo "Error in version evaluation. Report a bug!"
            return 3 
            ;;
    esac

    # Summary.
    echo
    [ ${warnings} -gt 0 ] && echo "${warnings} warning(s) have been found."
    [ ${fails} -gt 0 ] && echo "${fails} error(s) have been found."
    if [ ${fails} -gt 0 ] ; then
        echo "Saptune will not work properly!"
        return 1
    else 
        if [ ${warnings} -gt 0 ] ; then
            echo "Saptune should work properly, but better investigate!"
        else
            echo "Saptune is set up correctly."
        fi
    fi
    return 0    
}


# --- MAIN ---

# Introduction.
echo -e "\nThis is ${0##*/} v${version}.\n"
echo -e "It verifies if sapconf or saptune are set up correctly."
echo -e "Please keep in mind:"
echo -e " - Only *one* of both can be used at the same time!"
echo -e " - This tool does not check, if the tuning itself works correctly."
echo -e " - Follow the hints from top to down to minimize side effects.\n"

# Determine if we are running a SLES.
eval $(grep ^ID= /etc/os-release)
[ "${ID}" != "sles" ] && { echo "Only SLES is supported! Your OS ID is ${ID}! Exiting." ; exit 2 ; }

# Check parameters.
case "${@}" in
    sapconf)    collect_data
                check_sapconf
                exit $?
                ;;
    saptune)    collect_data
                check_saptune
                exit $?
                ;;
    overview)   collect_data
                overview
                exit $?
                ;;
    *)          echo "Usage: ${0##*/} overview|sapconf|saptune"
                exit 3
                ;;
esac

# Bye.
exit 0
